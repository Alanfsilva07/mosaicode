<?xml version="1.0" encoding="utf-8"?>
<HarpiaCodeTemplate description="c / opencv code template" extension=".c" language="c" name="opencv" source="xml">
 <command>
  export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/lib/;
export PKG_CONFIG_PATH=/lib/pkgconfig/;
g++ $filename$$extension$  -o $filename$ `pkg-config --cflags --libs opencv`
LD_LIBRARY_PATH=/lib/ $dir_name$./$filename$  2&gt; Error $error_log_file$
 </command>
 <code>
  // Auto-generated C Code - S2i Harpia
/*
*	In order to compile this source code run, in a terminal window, the following command:
*	gcc sourceCodeName.c `pkg-config --libs --cflags opencv` -o outputProgramName
*
*	the `pkg-config ... opencv` parameter is a inline command that returns the path to both
*	the libraries and the headers necessary when using opencv. The command also returns other necessary compiler options.
*/

// header:

#ifdef _CH_
#pragma package &lt;opencv&gt;
#endif

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;opencv/cv.h&gt;
#include &lt;opencv/cxmisc.h&gt;
#include &lt;opencv/cxcore.h&gt;
#include &lt;opencv/ml.h&gt;
#include &lt;opencv/cvaux.h&gt;
#include &lt;opencv/cvwimage.h&gt;
#include &lt;opencv/highgui.h&gt;
#include &lt;math.h&gt;

#define FRAMERATE 1000.0 / 25.0

$single_code[0]$

int main(int argc, char ** argv){
        char key = ' ';
        //declaration block
        $code[1]$
        while((key = (char)cvWaitKey(FRAMERATE)) != 27){
            //execution block
            $code[2, connection]$

            //deallocation block
            $code[3]$

        } // End of while
    $code[4]$

return 0;

} //closing main()
 </code>
</HarpiaCodeTemplate>